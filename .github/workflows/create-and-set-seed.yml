name: Create world with seed action

on:
  workflow_dispatch:
    inputs:
      seed_value:
        description: 'seed value(number)'
        required: true
  repository_dispatch:
      types:
        - create
        

env:
  SLACK_USERNAME: CreateActionBot
  SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
  SLACK_WEBHOOK: "https://hooks.slack.com/services/${{ secrets.WEBHOOK_PATH }}"
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8
permissions:
  id-token: write
  contents: read

jobs:
  terragrunt-create-seed:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
        role-session-name: github-actions-test-session
        aws-region: ap-northeast-1
        
    - name: Setup aqua
      uses: aquaproj/aqua-installer@v4.0.2
      with:
        aqua_version: v2.30.0

    - name: Setup Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Test Toggle Display Feature
      run: |
        echo "üß™ Testing toggle display functionality..."
        
        # Create a test output file with sample Terragrunt-like content
        cat << 'TEST_EOF' > test_output.txt
        Terragrunt will perform the following actions:

          # aws_instance.example will be created
          + resource "aws_instance" "example" {
              + ami                          = "ami-12345678"
              + instance_type               = "t3.micro"
              + key_name                    = "my-key"
              + vpc_security_group_ids      = (known after apply)
            }

          # aws_s3_bucket.test will be created  
          + resource "aws_s3_bucket" "test" {
              + bucket        = "my-test-bucket"
              + force_destroy = false
            }

        Plan: 2 to add, 0 to change, 0 to destroy.

        Changes to Outputs:
          + instance_id = (known after apply)
          + bucket_name = "my-test-bucket"
        TEST_EOF
        
        # Test the toggle display functionality
        file_size=$(wc -c < test_output.txt)
        
        {
          echo "## üß™ Test: Terragrunt Toggle Display Feature"
          echo ""
          echo "<details>"
          echo "<summary>üìã Sample Terragrunt Plan Output (Click to expand) - Size: ${file_size} bytes</summary>"
          echo ""
          echo '```hcl'
          sed 's/```/\\`\\`\\`/g' test_output.txt
          echo '```'
          echo "</details>"
          echo ""
          echo "---"
          echo ""
        } >> "$GITHUB_STEP_SUMMARY"
        
        echo "‚úÖ Toggle display test completed - check GitHub Actions Summary tab"
        
    - name: Create Mapping Yaml
      working-directory: terragrunt/environments/scheduling
      run: |
        cat << EOF > secrets.yaml
        OPS: ${{ secrets.WHITELIST_PLAYERS }}
        WHITELIST: ${{ secrets.WHITELIST_PLAYERS }}
        WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        S3_PREFIX_NAME: ${{ secrets.S3_PREFIX_NAME }}
        FILTERING_STRINGS: ${{ secrets.FILTERING_STRINGS }}
        EOF
        
    - name: Set Terraform variables(workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TF_VAR_seed_value=${{ github.event.inputs.seed_value }}" >> "$GITHUB_ENV"
    - name: Set Terraform variables(repository_dispatch)
      if: github.event_name == 'repository_dispatch'
      run: |
        echo "TF_VAR_seed_value=${{ github.event.client_payload.seed_value }}" >> "$GITHUB_ENV"
        
    - name: Initialize Terragrunt
      working-directory: terragrunt/environments/scheduling
      run: terragrunt init --terragrunt-non-interactive

    - name: Terragrunt Plan
      id: plan
      working-directory: terragrunt/environments/scheduling
      shell: /usr/bin/bash {0} # workaround ref:https://qiita.com/mkiken/items/3d2999217832704fcf01
      run: |
        echo "üìã Running Terragrunt Plan..."
        
        # Execute terragrunt plan and capture output
        set +e  # Don't exit on error to capture exit code
        terragrunt plan --terragrunt-non-interactive -detailed-exitcode \
          -var="seed_value=${{ env.TF_VAR_seed_value }}" \
          -var="set_recovery_point=false" \
          -var="set_seed_value=true" \
          > plan_output.txt 2>&1
        TF_PLAN_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "üìä Plan completed with exit code: ${TF_PLAN_EXIT_CODE}"
        echo "TF_PLAN_EXIT_CODE=${TF_PLAN_EXIT_CODE}" >> "$GITHUB_ENV"
        
        # Interpret exit codes
        case $TF_PLAN_EXIT_CODE in
          0) echo "‚úÖ No changes detected" ;;
          1) echo "‚ùå Terraform plan failed" && exit 1 ;;
          2) echo "üìù Changes detected - apply will be triggered" ;;
          *) echo "‚ö†Ô∏è Unexpected exit code: $TF_PLAN_EXIT_CODE" ;;
        esac
        
        # Display plan output summary
        if [ -f "plan_output.txt" ]; then
          plan_file_size=$(wc -c < plan_output.txt)
          echo "üìÑ Plan output file size: $plan_file_size bytes"
          echo "üìÑ First 20 lines of plan output:"
          head -20 plan_output.txt
          echo "üìÑ Last 20 lines of plan output:"
          tail -20 plan_output.txt
        else
          echo "‚ùå Plan output file not found!"
        fi

    - name: Apply Terragrunt
      if: ${{ env.TF_PLAN_EXIT_CODE == 2 }}
      working-directory: terragrunt/environments/scheduling
      run: |
        echo "üöÄ Running Terragrunt Apply..."
        
        # Execute terragrunt apply and capture output
        set +e  # Don't exit on error to capture exit code
        terragrunt apply --terragrunt-non-interactive \
          -var="seed_value=${{ env.TF_VAR_seed_value }}" \
          -var="set_recovery_point=false" \
          -var="set_seed_value=true" \
          -auto-approve > apply_output.txt 2>&1
        TF_APPLY_EXIT_CODE=$?
        set -e  # Re-enable exit on error
        
        echo "üìä Apply completed with exit code: ${TF_APPLY_EXIT_CODE}"
        
        # Check apply result
        if [ $TF_APPLY_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Apply successful"
        else
          echo "‚ùå Apply failed with exit code: $TF_APPLY_EXIT_CODE"
          exit $TF_APPLY_EXIT_CODE
        fi
        
        # Display apply output summary
        if [ -f "apply_output.txt" ]; then
          apply_file_size=$(wc -c < apply_output.txt)
          echo "üìÑ Apply output file size: $apply_file_size bytes"
          echo "üìÑ First 20 lines of apply output:"
          head -20 apply_output.txt
          echo "üìÑ Last 20 lines of apply output:"
          tail -20 apply_output.txt
        else
          echo "‚ùå Apply output file not found!"
        fi

    - name: Display Terragrunt Plan Output
      if: always()
      run: |
        cd terragrunt/environments/scheduling
        if [ -f "plan_output.txt" ] && [ -s "plan_output.txt" ]; then
          echo "üìã Creating Plan Output Summary..."
          
          # Check file size to handle large outputs appropriately
          file_size=$(wc -c < plan_output.txt)
          
          {
            echo "<details>"
            echo "<summary>üìã Terragrunt Plan Output (Click to expand) - Size: ${file_size} bytes</summary>"
            echo ""
            echo '```hcl'
            
            # If file is too large, show truncated version
            if [ "$file_size" -gt 100000 ]; then
              echo "‚ö†Ô∏è Output truncated due to large size (${file_size} bytes)"
              echo ""
              echo "=== First 2000 lines ==="
              head -2000 plan_output.txt | sed 's/```/\\`\\`\\`/g'
              echo ""
              echo "=== ... (content truncated) ==="
              echo ""
              echo "=== Last 1000 lines ==="
              tail -1000 plan_output.txt | sed 's/```/\\`\\`\\`/g'
            else
              # Show full output if manageable size
              sed 's/```/\\`\\`\\`/g' plan_output.txt
            fi
            
            echo '```'
            echo "</details>"
            echo ""
            echo "---"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ö†Ô∏è Plan output file not found or is empty" >> "$GITHUB_STEP_SUMMARY"
        fi
        
    - name: Display Terragrunt Apply Output  
      if: always() && env.TF_PLAN_EXIT_CODE == '2'
      run: |
        cd terragrunt/environments/scheduling
        if [ -f "apply_output.txt" ] && [ -s "apply_output.txt" ]; then
          echo "üöÄ Creating Apply Output Summary..."
          
          # Check file size to handle large outputs appropriately
          file_size=$(wc -c < apply_output.txt)
          
          {
            echo "<details>"
            echo "<summary>üöÄ Terragrunt Apply Output (Click to expand) - Size: ${file_size} bytes</summary>"
            echo ""
            echo '```hcl'
            
            # If file is too large, show truncated version
            if [ "$file_size" -gt 100000 ]; then
              echo "‚ö†Ô∏è Output truncated due to large size (${file_size} bytes)"
              echo ""
              echo "=== First 2000 lines ==="
              head -2000 apply_output.txt | sed 's/```/\\`\\`\\`/g'
              echo ""
              echo "=== ... (content truncated) ==="
              echo ""
              echo "=== Last 1000 lines ==="
              tail -1000 apply_output.txt | sed 's/```/\\`\\`\\`/g'
            else
              # Show full output if manageable size
              sed 's/```/\\`\\`\\`/g' apply_output.txt
            fi
            
            echo '```'
            echo "</details>"
            echo ""
            echo "---"
            echo ""
          } >> "$GITHUB_STEP_SUMMARY"
        else
          echo "‚ö†Ô∏è Apply output file not found or is empty" >> "$GITHUB_STEP_SUMMARY"
        fi

    - name: Update ECS Service
      working-directory: terragrunt/environments/scheduling
      run: |
        # Replace with your AWS CLI command to update ECS service
        CLUSTER="$(aws ecs list-clusters | jq -r '.clusterArns[0]' )"
        SVC="$(aws ecs list-services --cluster "${CLUSTER}" | jq -r '.serviceArns[0]' | sed -E 's/.+cluster\///g')"
        TASK_REVISION="$(aws ecs describe-task-definition \
          --task-definition minecraft-test \
          --query 'taskDefinition.revision' \
          --output text)"

        aws ecs update-service --cluster "${CLUSTER}" \
          --service "${SVC}" \
          --task-definition minecraft-test:"${TASK_REVISION}" \
          --force-new-deployment
          
    - name: Slack Notification for Success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Successful'
        SLACK_COLOR: good
        SLACK_MESSAGE: 'Create new world successfully for seed: ${{ github.event.inputs.seed_value }} :rocket:' 

    - name: Slack Notification for Failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Failed'
        SLACK_COLOR: danger
        SLACK_MESSAGE: "Workflow failed. Check details here: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
  
