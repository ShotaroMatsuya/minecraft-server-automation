name: Terragrunt Apply

on:
  push:
    branches:
      - main

concurrency:
  group: terragrunt-apply-${{ github.ref }}
  cancel-in-progress: false

env:
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  check-changes:
    name: Check for Changes and Labels
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.changes.outputs.changes }}
      keeping_changes: ${{ steps.changes.outputs.keeping_changes }}
      scheduling_changes: ${{ steps.changes.outputs.scheduling_changes }}
      pr_number: ${{ steps.pr_info.outputs.pr_number }}
      labels: ${{ steps.pr_info.outputs.labels }}
      should_run_keeping: ${{ steps.check_targets.outputs.should_run_keeping }}
      should_run_scheduling: ${{ steps.check_targets.outputs.should_run_scheduling }}
    steps:
      - name: Common Setup
        id: common_setup
        uses: ./.github/actions/common-setup
        with:
          aws-role: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          python-version: '3.13'

      - name: Get PR number and labels
        id: pr_info
        env:
          GH_TOKEN: ${{ steps.common_setup.outputs.token }}
        run: |
          bash scripts/github-actions/pr-info-helper.sh "${{ github.sha }}" "${{ github.repository }}" > pr_info.txt
          grep '^pr_number=' pr_info.txt | tee -a "$GITHUB_OUTPUT"
          grep '^pr_labels=' pr_info.txt | sed 's/pr_labels=/labels=/' | tee -a "$GITHUB_OUTPUT"

      - name: Check for relevant changes
        id: changes
        run: |
          # Check for general changes
          DIFF=$(git diff --name-only HEAD^ terragrunt/ terraform/modules terraform/keeping terraform/scheduling)
          
          # Check for keeping-specific changes
          KEEPING_DIFF=$(git diff --name-only HEAD^ terragrunt/environments/keeping/ terraform/keeping/ terraform/modules/)
          
          # Check for scheduling-specific changes
          SCHEDULING_DIFF=$(git diff --name-only HEAD^ terragrunt/environments/scheduling/ terraform/scheduling/ terraform/modules/)
          
          if [[ -n "${DIFF}" ]]; then
            echo "changes=true" >> "$GITHUB_OUTPUT"
            echo "Changed files: ${DIFF}"
          else
            echo "changes=false" >> "$GITHUB_OUTPUT"
            echo "No relevant changes detected"
          fi
          
          if [[ -n "${KEEPING_DIFF}" ]]; then
            echo "keeping_changes=true" >> "$GITHUB_OUTPUT"
            echo "Keeping changes: ${KEEPING_DIFF}"
          else
            echo "keeping_changes=false" >> "$GITHUB_OUTPUT"
            echo "No keeping-specific changes detected"
          fi
          
          if [[ -n "${SCHEDULING_DIFF}" ]]; then
            echo "scheduling_changes=true" >> "$GITHUB_OUTPUT"
            echo "Scheduling changes: ${SCHEDULING_DIFF}"
          else
            echo "scheduling_changes=false" >> "$GITHUB_OUTPUT"
            echo "No scheduling-specific changes detected"
          fi

      - name: Check Target Labels
        id: check_targets
        run: |
          LABELS="${{ steps.pr_info.outputs.labels }}"
          KEEPING_CHANGES="${{ steps.changes.outputs.keeping_changes }}"
          SCHEDULING_CHANGES="${{ steps.changes.outputs.scheduling_changes }}"
          
          # Convert space-separated labels to JavaScript array
          node -e "
          try {
            const applyTargetChecker = require('./scripts/github-actions/apply-target-checker.js');
            const fs = require('fs');
            
            const labels = '$LABELS'.split(' ').filter(l => l);
            const keepingChanges = '$KEEPING_CHANGES' === 'true';
            const schedulingChanges = '$SCHEDULING_CHANGES' === 'true';
            
            const result = applyTargetChecker(labels, keepingChanges, schedulingChanges);
            
            // Write outputs to GITHUB_OUTPUT
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 
              \`should_run_keeping=\${result.should_run_keeping}\\n\`);
            fs.appendFileSync(process.env.GITHUB_OUTPUT, 
              \`should_run_scheduling=\${result.should_run_scheduling}\\n\`);
              
          } catch (error) {
            process.exit(1);
          }
          "

  apply-keeping:
    name: Terragrunt Apply - Keeping
    runs-on: ubuntu-latest
    needs: [check-changes]
    if: always() && needs.check-changes.outputs.should_run_keeping == 'true'
    outputs:
      apply_status: ${{ steps.apply.outputs.status }}
      resources_applied: ${{ steps.apply.outputs.resources_applied }}
      resources_changed: ${{ steps.apply.outputs.resources_changed }}
      resources_destroyed: ${{ steps.apply.outputs.resources_destroyed }}
    steps:          
      - name: Common Setup
        id: common_setup
        uses: ./.github/actions/common-setup
        with:
          aws-role: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          python-version: '3.13'

      - name: Check if keeping environment exists
        id: check-env
        run: |
          if [ -d "terragrunt/environments/keeping" ]; then
            echo "✅ terragrunt/environments/keeping exists"
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ terragrunt/environments/keeping does not exist"
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Terragrunt Apply - Keeping
        id: apply
        if: steps.check-env.outputs.exists == 'true'
        run: bash scripts/github-actions/terragrunt-apply.sh terragrunt/environments/keeping
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_github_token: ${{ steps.common_setup.outputs.token }}

      - name: Upload Keeping Apply Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terragrunt-apply-keeping
          path: |
            terragrunt/environments/keeping/apply_output.txt
            terragrunt/environments/keeping/plan_output.txt
            terragrunt/environments/keeping/init_output.txt
            terragrunt/environments/keeping/apply_errors.txt
            terragrunt/environments/keeping/plan_errors.txt
          retention-days: 30
      - name: Slack Notification on Success
        if: success()
        uses: ./.github/actions/slack-notify
        with:
          status: "success"
          environment: "keeping"
          message: "keeping environment applied successfully 🚀"
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}

      - name: Slack Notification on Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          status: "failure"
          environment: "keeping"
          message: "keeping environment apply failed 😢"
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}

  apply-scheduling:
    name: Terragrunt Apply - Scheduling
    runs-on: ubuntu-latest
    needs: [check-changes,  apply-keeping]
    if: |
      needs.check-changes.outputs.should_run_scheduling == 'true' && 
      always()
    outputs:
      apply_status: ${{ steps.apply.outputs.status }}
      resources_applied: ${{ steps.apply.outputs.resources_applied }}
      resources_changed: ${{ steps.apply.outputs.resources_changed }}
      resources_destroyed: ${{ steps.apply.outputs.resources_destroyed }}
    steps:
      - name: Common Setup
        id: common_setup
        uses: ./.github/actions/common-setup
        with:
          aws-role: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          python-version: '3.13'

      - name: Create Mapping Yaml for scheduling
        working-directory: terraform/scheduling
        run: |
          cat << EOF > secrets.yaml
          OPS: ${{ secrets.WHITELIST_PLAYERS }}
          WHITELIST: ${{ secrets.WHITELIST_PLAYERS }}
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_PREFIX_NAME: ${{ secrets.S3_PREFIX_NAME }}
          FILTERING_STRINGS: ${{ secrets.FILTERING_STRINGS }}
          EOF

      - name: Check if scheduling environment exists
        id: check-env
        run: |
          if [ -d "terragrunt/environments/scheduling" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Terragrunt Apply - Scheduling
        id: apply
        if: steps.check-env.outputs.exists == 'true'
        run: bash scripts/github-actions/terragrunt-apply.sh terragrunt/environments/scheduling
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
          TF_VAR_github_token: ${{ steps.common_setup.outputs.token }}


      - name: Upload Scheduling Apply Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terragrunt-apply-scheduling
          path: |
            terragrunt/environments/scheduling/apply_output.txt
            terragrunt/environments/scheduling/plan_output.txt
            terragrunt/environments/scheduling/init_output.txt
            terragrunt/environments/scheduling/apply_errors.txt
            terragrunt/environments/scheduling/plan_errors.txt
          retention-days: 30
      - name: Slack Notification on Success
        if: success()
        uses: ./.github/actions/slack-notify
        with:
          status: "success"
          environment: "scheduling"
          message: "scheduling environment applied successfully 🚀"
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}

      - name: Slack Notification on Failure
        if: failure()
        uses: ./.github/actions/slack-notify
        with:
          status: "failure"
          environment: "scheduling"
          message: "scheduling environment apply failed 😢"
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}

  comment-apply-results:
    name: Comment Apply Results
    runs-on: ubuntu-latest
    needs: [check-changes, apply-keeping, apply-scheduling]
    if: |
      always() && 
      needs.check-changes.outputs.pr_number != '' && 
      needs.check-changes.outputs.pr_number != null && 
      (
        needs.apply-keeping.result == 'success' || 
        needs.apply-scheduling.result == 'success' || 
        needs.apply-keeping.result == 'failure' || 
        needs.apply-scheduling.result == 'failure' ||
        needs.apply-keeping.outputs.apply_status == 'plan_failed' ||
        needs.apply-scheduling.outputs.apply_status == 'plan_failed' ||
        needs.apply-keeping.outputs.apply_status == 'init_failed' ||
        needs.apply-scheduling.outputs.apply_status == 'init_failed'
      )
    steps:
      - name: Common Setup
        id: common_setup
        uses: ./.github/actions/common-setup
        with:
          aws-role: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          python-version: '3.13'

      - name: Comment Apply Results
        uses: actions/github-script@v7
        with:
          github-token: ${{ steps.common_setup.outputs.token }}
          script: |
            const commentHandler = require('./scripts/github-actions/comment-handler.js');
            
            // Process both environments in sequence
            const environments = [
              {
                name: 'keeping',
                status: '${{ needs.apply-keeping.outputs.apply_status }}',
                wasExecuted: '${{ needs.apply-keeping.result }}' !== 'skipped',
                resourcesApplied: '${{ needs.apply-keeping.outputs.resources_applied }}' || '0',
                resourcesChanged: '${{ needs.apply-keeping.outputs.resources_changed }}' || '0',
                resourcesDestroyed: '${{ needs.apply-keeping.outputs.resources_destroyed }}' || '0'
              },
              {
                name: 'scheduling', 
                status: '${{ needs.apply-scheduling.outputs.apply_status }}',
                wasExecuted: '${{ needs.apply-scheduling.result }}' !== 'skipped',
                resourcesApplied: '${{ needs.apply-scheduling.outputs.resources_applied }}' || '0',
                resourcesChanged: '${{ needs.apply-scheduling.outputs.resources_changed }}' || '0',
                resourcesDestroyed: '${{ needs.apply-scheduling.outputs.resources_destroyed }}' || '0'
              }
            ];
            
            // Get PR number and validate
            const prNumber = '${{ needs.check-changes.outputs.pr_number }}';
            
            // Convert to number with validation
            const prNumberInt = parseInt(prNumber ? prNumber.trim() : '', 10);

            if (prNumber && prNumber.trim() !== '' && prNumber !== 'null' && !isNaN(prNumberInt) && prNumberInt > 0) {
              console.log('✅ Using PR number for comments:', prNumberInt);
              
              for (const env of environments) {
                // Skip if the job was skipped (e.g., keeping failed so scheduling was skipped)
                if (!env.wasExecuted) {
                  console.log(`⏭️ Skipping ${env.name} environment - job was not executed`);
                  continue;
                }
                
                const inputs = {
                  commentType: 'terragrunt-apply',
                  environment: env.name,
                  status: env.status || 'unknown',
                  // Use apply results from job outputs instead of artifacts
                  resourcesApplied: env.resourcesApplied,
                  resourcesChanged: env.resourcesChanged,
                  resourcesDestroyed: env.resourcesDestroyed,
                  // Flag to indicate this is from apply workflow
                  isApplyWorkflow: true,
                  // Override PR number for API calls
                  prNumber: prNumberInt
                };
                
                try {
                  await commentHandler(github, context, inputs);
                  console.log(`✅ Successfully processed ${env.name} environment apply results`);
                } catch (error) {
                  console.error(`❌ Error processing ${env.name} environment apply results:`, error);
                  console.error('Error details:', {
                    message: error.message,
                    status: error.status,
                    response: error.response?.data
                  });
                  // Continue processing other environments even if one fails
                }
              }
            } else {
              console.log('❌ No valid PR number found, skipping comment operations');

              return;
            }
