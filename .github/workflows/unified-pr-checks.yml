name: Unified PR Checks

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terragrunt/**'
      - 'terraform/**'
      - '.github/workflows/**'
      - '.tflint.hcl'
      - 'trivy.yaml'

env:
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write
  contents: read
  pull-requests: write
  security-events: write

jobs:
  security-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    outputs:
      has_issues: ${{ steps.check-results.outputs.has_issues }}
      results_summary: ${{ steps.check-results.outputs.results_summary }}
      scan_status: ${{ steps.check-results.outputs.scan_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: |
          rm -f ./terragrunt ./terraform ./tflint ./aws ./jq ./yq 2>/dev/null || true
          aqua install --all

      - name: Check if terraform directory exists
        id: check-terraform
        run: |
          if [ -d "terraform" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Run Trivy Security Scan
        id: trivy-scan
        if: steps.check-terraform.outputs.exists == 'true'
        run: |
          echo "🔍 Running Trivy security scan..."
          
          # Run Trivy scan and capture errors
          scan_exit_code=0
          trivy config terraform/ \
            --config trivy.yaml \
            --format table \
            --output trivy-results.txt \
            --exit-code 0 2> trivy-errors.txt || scan_exit_code=$?
          
          # Generate SARIF for GitHub Security tab
          trivy config terraform/ \
            --config trivy.yaml \
            --format sarif \
            --output trivy-security.sarif \
            --exit-code 0 || true
          
          # Set scan status
          if [ $scan_exit_code -eq 0 ]; then
            echo "scan_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "scan_status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Security Results
        id: check-results
        run: |
          if [ "${{ steps.trivy-scan.outputs.scan_status }}" = "failed" ]; then
            echo "has_issues=false" >> "$GITHUB_OUTPUT"
            echo "results_summary=Security scan failed" >> "$GITHUB_OUTPUT"
            echo "scan_status=failed" >> "$GITHUB_OUTPUT"
          elif [ -f "trivy-results.txt" ] && [ -s "trivy-results.txt" ]; then
            if grep -q -E "(CRITICAL|HIGH|MEDIUM)" trivy-results.txt 2>/dev/null; then
              echo "has_issues=true" >> "$GITHUB_OUTPUT"
              echo "results_summary=Security issues found" >> "$GITHUB_OUTPUT"
              echo "scan_status=success" >> "$GITHUB_OUTPUT"
            else
              echo "has_issues=false" >> "$GITHUB_OUTPUT"
              echo "results_summary=No security issues found" >> "$GITHUB_OUTPUT"
              echo "scan_status=success" >> "$GITHUB_OUTPUT"
            fi
          else
            echo "has_issues=false" >> "$GITHUB_OUTPUT"
            echo "results_summary=No security issues found" >> "$GITHUB_OUTPUT"
            echo "scan_status=success" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-results
          path: |
            trivy-results.txt
            trivy-security.sarif
            trivy-errors.txt
          retention-days: 30

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-security.sarif'
          category: 'infrastructure-security-scan'
        if: hashFiles('trivy-security.sarif') != ''

  code-quality:
    name: TFLint Code Quality
    runs-on: ubuntu-latest
    outputs:
      has_issues: ${{ steps.check-results.outputs.has_issues }}
      results_summary: ${{ steps.check-results.outputs.results_summary }}
      scan_status: ${{ steps.check-results.outputs.scan_status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: |
          rm -f ./terragrunt ./terraform ./tflint ./aws ./jq ./yq 2>/dev/null || true
          aqua install --all

      - name: Check if terraform directory exists
        id: check-terraform
        run: |
          if [ -d "terraform" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Initialize TFLint
        if: steps.check-terraform.outputs.exists == 'true'
        run: |
          if [ -d "terraform" ]; then
            cd terraform
            tflint --init --config=../.tflint.hcl || echo "TFLint init failed - continuing without plugins"
            cd ..
          fi

      - name: Run TFLint Analysis
        id: tflint-scan
        if: steps.check-terraform.outputs.exists == 'true'
        run: |
          echo "🔍 Running TFLint code quality analysis..."
          
          scan_exit_code=0
          cd terraform
          tflint --format=compact --config=../.tflint.hcl > ../tflint-results.txt 2> ../tflint-errors.txt || scan_exit_code=$?
          cd ..
          
          # Set scan status
          if [ $scan_exit_code -eq 0 ] || [ $scan_exit_code -eq 2 ]; then
            echo "scan_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "scan_status=failed" >> "$GITHUB_OUTPUT"
          fi

      - name: Check Code Quality Results
        id: check-results
        run: |
          if [ "${{ steps.tflint-scan.outputs.scan_status }}" = "failed" ]; then
            echo "has_issues=false" >> "$GITHUB_OUTPUT"
            echo "results_summary=Code quality scan failed" >> "$GITHUB_OUTPUT"
            echo "scan_status=failed" >> "$GITHUB_OUTPUT"
          elif [ -f "tflint-results.txt" ] && [ -s "tflint-results.txt" ]; then
            echo "has_issues=true" >> "$GITHUB_OUTPUT"
            echo "results_summary=Code quality issues found" >> "$GITHUB_OUTPUT"
            echo "scan_status=success" >> "$GITHUB_OUTPUT"
          else
            echo "has_issues=false" >> "$GITHUB_OUTPUT"
            echo "results_summary=No code quality issues found" >> "$GITHUB_OUTPUT"
            echo "scan_status=success" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Code Quality Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tflint-quality-results
          path: |
            tflint-results.txt
            tflint-errors.txt
          retention-days: 30

  terragrunt-plan:
    name: Terragrunt Plan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [keeping, scheduling]
        include:
          - environment: keeping
            path: terragrunt/environments/keeping
          - environment: scheduling
            path: terragrunt/environments/scheduling
    outputs:
      plan_status_keeping: ${{ steps.plan-keeping.outputs.status }}
      plan_status_scheduling: ${{ steps.plan-scheduling.outputs.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          role-session-name: github-actions-test-session
          aws-region: ap-northeast-1

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: |
          rm -f ./terragrunt ./terraform ./tflint ./aws ./jq ./yq 2>/dev/null || true
          aqua install --all

      - name: Check if environment exists
        id: check-env
        run: |
          if [ -d "${{ matrix.path }}" ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Terragrunt Format Check
        id: fmt-check
        if: steps.check-env.outputs.exists == 'true'
        run: |
          cd "${{ matrix.path }}"
          format_exit_code=0
          
          # Run format check and capture output
          if terragrunt fmt --check --terragrunt-non-interactive 2>&1; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            # Create empty error file for consistency
            touch format_errors.txt
          else
            format_exit_code=$?
            echo "status=needs_formatting" >> "$GITHUB_OUTPUT"
            # Capture actual error for failed format check
            terragrunt fmt --check --terragrunt-non-interactive > /dev/null 2> format_errors.txt || true
          fi
          
          # Debug output
          echo "Format check exit code: $format_exit_code"
          echo "Format errors file size: $(wc -c < format_errors.txt 2>/dev/null || echo 0) bytes"
        continue-on-error: true

      - name: Terragrunt Validation
        id: validate
        if: steps.check-env.outputs.exists == 'true'
        run: |
          cd "${{ matrix.path }}"
          validate_exit_code=0
          
          # Run validation and capture output
          if terragrunt validate --terragrunt-non-interactive 2>&1; then
            echo "status=success" >> "$GITHUB_OUTPUT"
            # Create empty error file for consistency
            touch validate_errors.txt
          else
            validate_exit_code=$?
            echo "status=failed" >> "$GITHUB_OUTPUT"
            # Capture actual error for failed validation
            terragrunt validate --terragrunt-non-interactive > /dev/null 2> validate_errors.txt || true
          fi
          
          # Debug output
          echo "Validation exit code: $validate_exit_code"
          echo "Validation errors file size: $(wc -c < validate_errors.txt 2>/dev/null || echo 0) bytes"
        continue-on-error: true

      - name: Terragrunt Plan
        id: plan
        if: steps.check-env.outputs.exists == 'true'
        run: |
          cd "${{ matrix.path }}"
          
          # Initialize first
          init_exit_code=0
          terragrunt init --terragrunt-non-interactive 2>&1 | tee init_output.txt || init_exit_code=$?
          
          if [ $init_exit_code -ne 0 ]; then
            echo "status=init_failed" >> "$GITHUB_OUTPUT"
            echo "resources_to_add=0" >> "$GITHUB_OUTPUT"
            echo "resources_to_change=0" >> "$GITHUB_OUTPUT"
            echo "resources_to_destroy=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Run plan - capture all output as Terragrunt outputs plan to stderr
          plan_exit_code=0
          terragrunt plan -detailed-exitcode --terragrunt-non-interactive > plan_output.txt 2>&1 || plan_exit_code=$?
          
          # Create empty error file for consistency
          touch plan_errors.txt
          
          # Parse results and set resource counts
          if [ -f "plan_output.txt" ]; then
            to_add=$(grep -c "will be created" plan_output.txt 2>/dev/null) || to_add=0
            to_change=$(grep -c "will be updated" plan_output.txt 2>/dev/null) || to_change=0
            to_destroy=$(grep -c "will be destroyed" plan_output.txt 2>/dev/null) || to_destroy=0
            
            echo "resources_to_add=$to_add" >> "$GITHUB_OUTPUT"
            echo "resources_to_change=$to_change" >> "$GITHUB_OUTPUT"
            echo "resources_to_destroy=$to_destroy" >> "$GITHUB_OUTPUT"
          else
            echo "resources_to_add=0" >> "$GITHUB_OUTPUT"
            echo "resources_to_change=0" >> "$GITHUB_OUTPUT"
            echo "resources_to_destroy=0" >> "$GITHUB_OUTPUT"
          fi
          
          # Determine status based on terraform plan -detailed-exitcode behavior
          # 0: No changes, 1: Error, 2: Changes detected
          # However, if we have valid plan output, prioritize that over exit codes
          
          plan_status="unknown"
          
          if [ -f "plan_output.txt" ] && grep -q "Plan:" plan_output.txt; then
            # We have a valid plan summary - extract resource counts
            to_add_check=$(grep -o "[0-9]\+ to add" plan_output.txt | grep -o "[0-9]\+" | head -1) || to_add_check=0
            to_change_check=$(grep -o "[0-9]\+ to change" plan_output.txt | grep -o "[0-9]\+" | head -1) || to_change_check=0
            to_destroy_check=$(grep -o "[0-9]\+ to destroy" plan_output.txt | grep -o "[0-9]\+" | head -1) || to_destroy_check=0
            
            # If we have a valid plan, determine status based on resource changes
            if [ "$to_add_check" -gt 0 ] || [ "$to_change_check" -gt 0 ] || [ "$to_destroy_check" -gt 0 ]; then
              plan_status="has_changes"
              echo "✅ Plan successful: $to_add_check to add, $to_change_check to change, $to_destroy_check to destroy"
            else
              plan_status="no_changes"
              echo "✅ Plan successful: No changes detected"
            fi
          elif [ "${plan_exit_code:-0}" -eq 0 ]; then
            # Exit code 0: No changes (standard terraform behavior)
            plan_status="no_changes"
            echo "✅ Plan completed: No changes"
          elif [ "${plan_exit_code:-0}" -eq 2 ]; then
            # Exit code 2: Changes detected (standard terraform behavior)
            plan_status="has_changes"
            echo "✅ Plan completed: Changes detected"
          else
            # Exit code 1 or other: Error occurred and no valid plan found
            plan_status="failed"
            echo "❌ Plan failed: Exit code ${plan_exit_code:-0}, no valid plan output"
          fi
          
          # Set the status output
          echo "status=$plan_status" >> "$GITHUB_OUTPUT"
          
          # Debug output
          echo "Plan exit code: ${plan_exit_code:-0}"
          echo "Plan output file exists: $(test -f plan_output.txt && echo 'yes' || echo 'no')"
          echo "Plan output size: $(wc -c < plan_output.txt 2>/dev/null || echo 0) bytes"
          echo "Plan errors file exists: $(test -f plan_errors.txt && echo 'yes' || echo 'no')"
          echo "Plan errors size: $(wc -c < plan_errors.txt 2>/dev/null || echo 0) bytes"
        continue-on-error: true

      - name: Set environment-specific output
        id: plan-keeping
        if: matrix.environment == 'keeping'
        run: |
          echo "status=${{ steps.plan.outputs.status }}" >> "$GITHUB_OUTPUT"

      - name: Set environment-specific output
        id: plan-scheduling
        if: matrix.environment == 'scheduling'
        run: |
          echo "status=${{ steps.plan.outputs.status }}" >> "$GITHUB_OUTPUT"

      - name: Upload Plan Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: terragrunt-plan-${{ matrix.environment }}
          path: |
            ${{ matrix.path }}/plan_output.txt
            ${{ matrix.path }}/init_output.txt
            ${{ matrix.path }}/plan_errors.txt
            ${{ matrix.path }}/format_errors.txt
            ${{ matrix.path }}/validate_errors.txt
          retention-days: 30

  comment-results:
    name: Comment PR Results
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, terragrunt-plan]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Security Results
        uses: actions/download-artifact@v4
        with:
          name: trivy-security-results
          path: security-results/
        continue-on-error: true

      - name: Comment Security Scan Results
        uses: actions/github-script@v7
        with:
          script: |
            const commentHandler = require('./scripts/github-actions/comment-handler.js');
            
            const inputs = {
              commentType: 'security',
              hasIssues: '${{ needs.security-scan.outputs.has_issues }}' === 'true',
              resultsSummary: '${{ needs.security-scan.outputs.results_summary }}' || 'No security issues found',
              scanStatus: '${{ needs.security-scan.outputs.scan_status }}' || 'success',
              errorLogPath: 'security-results/trivy-errors.txt'
            };
            
            await commentHandler(github, context, inputs);

      - name: Download Code Quality Results
        uses: actions/download-artifact@v4
        with:
          name: tflint-quality-results
          path: quality-results/
        continue-on-error: true

      - name: Comment Code Quality Results
        uses: actions/github-script@v7
        with:
          script: |
            const commentHandler = require('./scripts/github-actions/comment-handler.js');
            
            const inputs = {
              commentType: 'code-quality',
              hasIssues: '${{ needs.code-quality.outputs.has_issues }}' === 'true',
              resultsSummary: '${{ needs.code-quality.outputs.results_summary }}' || 'No code quality issues found',
              scanStatus: '${{ needs.code-quality.outputs.scan_status }}' || 'success',
              errorLogPath: 'quality-results/tflint-errors.txt'
            };
            
            await commentHandler(github, context, inputs);

      - name: Download Terragrunt Plan Results
        uses: actions/download-artifact@v4
        with:
          pattern: terragrunt-plan-*
          path: plan-results/
          merge-multiple: false
        continue-on-error: true

      - name: Debug Downloaded Artifacts
        run: |
          echo "=== Debug: Downloaded artifact structure ==="
          find plan-results/ -type f -name "*.txt" -exec ls -la {} \;
          echo "=== Debug: Full directory tree ==="
          find plan-results/ -type f | head -20
          echo "=== Debug: Looking for plan_output.txt files ==="
          find plan-results/ -name "plan_output.txt" -exec ls -la {} \;

      - name: Comment Terragrunt Plan Results
        uses: actions/github-script@v7
        with:
          script: |
            const commentHandler = require('./scripts/github-actions/comment-handler.js');
            
            // Process both environments in a single step
            const environments = [
              {
                name: 'keeping',
                status: '${{ needs.terragrunt-plan.outputs.plan_status_keeping }}'
              },
              {
                name: 'scheduling', 
                status: '${{ needs.terragrunt-plan.outputs.plan_status_scheduling }}'
              }
            ];
            
            for (const env of environments) {
              console.log(`Processing ${env.name} environment...`);
              
              const inputs = {
                commentType: 'terragrunt-plan',
                environment: env.name,
                status: env.status || 'unknown',
                planFilePath: `plan-results/terragrunt-plan-${env.name}/plan_output.txt`,
                initErrorLogPath: `plan-results/terragrunt-plan-${env.name}/init_output.txt`,
                planErrorLogPath: `plan-results/terragrunt-plan-${env.name}/plan_errors.txt`,
                formatErrorLogPath: `plan-results/terragrunt-plan-${env.name}/format_errors.txt`,
                validateErrorLogPath: `plan-results/terragrunt-plan-${env.name}/validate_errors.txt`,
                artifactBasePath: 'plan-results'
              };
              
              try {
                await commentHandler(github, context, inputs);
                console.log(`✅ Successfully processed ${env.name} environment`);
              } catch (error) {
                console.error(`❌ Error processing ${env.name} environment:`, error);
                // Continue processing other environments even if one fails
              }
            }
