name: Terragrunt PR Checks

# Authentication Options for AWS:
# 1. OIDC (Recommended) - Requires OIDCプロバイダー setup in AWS
#    - No secrets needed in GitHub
#    - Uses: role-to-assume only
#    - Permissions: id-token: write
# 
# 2. IAM User + AssumeRole - Traditional approach
#    - Requires: AWS_ACCESS_KEY_ID + AWS_SECRET_ACCESS_KEY secrets
#    - Uses: aws-access-key-id + aws-secret-access-key + role-to-assume
#    - Permissions: No special permissions needed
#
# Current: Static analysis focus (AWS auth commented out)

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terragrunt/**'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write
  contents: read
  pull-requests: write
  security-events: write

jobs:
  terragrunt-check:
    name: Terragrunt Validation (Format Check Only)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [keeping, scheduling]
        include:
          - environment: keeping
            path: terragrunt/environments/keeping
          - environment: scheduling
            path: terragrunt/environments/scheduling

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          role-session-name: github-actions-test-session
          aws-region: ap-northeast-1

      # Debug: Check AWS configuration
      - name: Debug AWS Configuration
        run: |
          echo "AWS Region: $AWS_DEFAULT_REGION"
          echo "AWS Account ID (from env): ${{ env.AWS_ACCOUNT_ID }}"
          echo "Assumed Role ARN would be: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions"
          aws sts get-caller-identity || echo "AWS authentication failed"
        continue-on-error: true

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Terragrunt Format Check
        id: fmt
        working-directory: ${{ matrix.path }}
        run: |
          if terragrunt hcl-fmt --terragrunt-check; then
            echo "result=No changes needed" >> "$GITHUB_OUTPUT"
            echo "needs_format=false" >> "$GITHUB_OUTPUT"
          else
            echo "result=Changes needed" >> "$GITHUB_OUTPUT"
            echo "needs_format=true" >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true

      - name: Terragrunt Syntax Check
        id: validate
        working-directory: ${{ matrix.path }}
        run: |
          echo "Checking Terragrunt configuration syntax..."
          if terragrunt --version >/dev/null 2>&1; then
            echo "✅ Terragrunt installation verified"
            echo "outcome=success" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Terragrunt installation failed"
            echo "outcome=failure" >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true

      - name: Static Analysis Status
        id: plan
        run: |
          echo "📋 AWS-dependent steps skipped for static analysis focus"
          echo "outcome=skipped" >> "$GITHUB_OUTPUT"
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `## Terragrunt Results for \`${{ matrix.environment }}\`
            
            #### Format Check 🖌 \`${{ steps.fmt.outputs.result }}\`
            #### Validation 🔍 \`${{ steps.validate.outcome }}\`  
            #### Plan 📖 \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan Output</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout || 'No output' }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: TFLint
        uses: reviewdog/action-tflint@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ./terraform
          reporter: github-pr-review
          filter_mode: nofilter
          fail_level: error
          tflint_version: "v0.53.0"

      - name: Trivy - Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform/'
          format: 'sarif'
          output: 'trivy-terraform.sarif'
        continue-on-error: true

      - name: Check Trivy Terraform SARIF exists
        id: check-terraform-sarif
        run: |
          if [ -f "trivy-terraform.sarif" ]; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-terraform.sarif'
          category: 'terraform-security-scan'
        if: steps.check-terraform-sarif.outputs.sarif_exists == 'true'

      - name: Trivy - Terragrunt Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terragrunt/'
          format: 'sarif'
          output: 'trivy-terragrunt.sarif'
        continue-on-error: true

      - name: Check Trivy Terragrunt SARIF exists
        id: check-terragrunt-sarif
        run: |
          if [ -f "trivy-terragrunt.sarif" ]; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload Trivy Terragrunt SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-terragrunt.sarif'
          category: 'terragrunt-security-scan'
        if: steps.check-terragrunt-sarif.outputs.sarif_exists == 'true'

      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          working_directory: 'terraform'
          github_token: ${{ github.token }}

      - name: tfsec SARIF Report
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif
          tfsec_args: --minimum-severity HIGH
        continue-on-error: true

      - name: Check tfsec SARIF exists
        id: check-tfsec-sarif
        run: |
          if [ -f "tfsec.sarif" ]; then
            echo "sarif_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "sarif_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif
          category: 'tfsec-security-scan'
        if: steps.check-tfsec-sarif.outputs.sarif_exists == 'true'

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: Terraform Module Dependency Check
        run: |
          echo "## Terraform Module Dependencies" >> "$GITHUB_STEP_SUMMARY"
          echo "Scanning for module versions and potential updates..." >> "$GITHUB_STEP_SUMMARY"
          
          find terraform/ -name "*.tf" -exec grep -l "source.*terraform-aws-modules" {} \; | while read -r file; do
            echo "### $file" >> "$GITHUB_STEP_SUMMARY"
            grep -n "source.*terraform-aws-modules\|version.*=" "$file" >> "$GITHUB_STEP_SUMMARY" || true
            echo "" >> "$GITHUB_STEP_SUMMARY"
          done

      - name: Terragrunt Configuration Check
        run: |
          echo "## Terragrunt Configuration Analysis" >> "$GITHUB_STEP_SUMMARY"
          echo "Checking Terragrunt configuration consistency..." >> "$GITHUB_STEP_SUMMARY"
          
          # Check for version consistency
          if [ -f "terragrunt/terragrunt.hcl" ]; then
            echo "### Root Configuration" >> "$GITHUB_STEP_SUMMARY"
            echo "\`\`\`hcl" >> "$GITHUB_STEP_SUMMARY"
            grep -A 10 "module_versions" terragrunt/terragrunt.hcl >> "$GITHUB_STEP_SUMMARY" || true
            echo "\`\`\`" >> "$GITHUB_STEP_SUMMARY"
          fi
