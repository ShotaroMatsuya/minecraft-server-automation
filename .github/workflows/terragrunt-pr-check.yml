name: Terragrunt PR Checks

on:
  pull_request:
    branches:
      - main
    paths:
      - 'terragrunt/**'
      - 'terraform/**'
      - '.github/workflows/**'

env:
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8

permissions:
  id-token: write
  actions: read
  contents: read
  pull-requests: write
  security-events: write

jobs:
  terragrunt-check:
    name: Terragrunt Validation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        environment: [keeping, scheduling]
        include:
          - environment: keeping
            path: terragrunt/environments/keeping
          - environment: scheduling
            path: terragrunt/environments/scheduling

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
          role-session-name: github-actions-terragrunt-pr
          aws-region: ap-northeast-1

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: Setup Terragrunt
        run: |
          curl -Lo terragrunt https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64
          chmod +x terragrunt
          sudo mv terragrunt /usr/local/bin/

      - name: Create Mapping Yaml for scheduling
        if: matrix.environment == 'scheduling'
        working-directory: terraform/scheduling
        run: |
          cat << EOF > secrets.yaml
          OPS: ${{ secrets.WHITELIST_PLAYERS }}
          WHITELIST: ${{ secrets.WHITELIST_PLAYERS }}
          WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_PREFIX_NAME: ${{ secrets.S3_PREFIX_NAME }}
          FILTERING_STRINGS: ${{ secrets.FILTERING_STRINGS }}
          EOF

      - name: Terragrunt Format Check
        id: fmt
        working-directory: ${{ matrix.path }}
        run: |
          if terragrunt hcl-fmt --terragrunt-check; then
            echo "result=No changes needed" >> "$GITHUB_OUTPUT"
            echo "needs_format=false" >> "$GITHUB_OUTPUT"
          else
            echo "result=Changes needed" >> "$GITHUB_OUTPUT"
            echo "needs_format=true" >> "$GITHUB_OUTPUT"
          fi
        continue-on-error: true

      - name: Terragrunt Validate
        id: validate
        working-directory: ${{ matrix.path }}
        run: terragrunt validate --terragrunt-non-interactive
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
        continue-on-error: true

      - name: Terragrunt Plan
        id: plan
        working-directory: ${{ matrix.path }}
        run: terragrunt plan --terragrunt-non-interactive -no-color
        env:
          TF_VAR_aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
        continue-on-error: true

      - name: Comment PR with results
        uses: actions/github-script@v7
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `## Terragrunt Results for \`${{ matrix.environment }}\`
            
            #### Format Check üñå \`${{ steps.fmt.outputs.result }}\`
            #### Validation üîç \`${{ steps.validate.outcome }}\`  
            #### Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan Output</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout || 'No output' }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: TFLint
        uses: reviewdog/action-tflint@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          working_directory: ./terraform
          reporter: github-pr-review
          filter_mode: nofilter
          fail_level: error
          tflint_version: "v0.53.0"

      - name: Trivy - Terraform Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terraform/'
          format: 'sarif'
          output: 'trivy-terraform.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-terraform.sarif'

      - name: Trivy - Terragrunt Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: 'terragrunt/'
          format: 'sarif'
          output: 'trivy-terragrunt.sarif'

      - name: Upload Trivy Terragrunt SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-terragrunt.sarif'

      - name: tfsec Security Scan
        uses: aquasecurity/tfsec-pr-commenter-action@v1.3.1
        with:
          working_directory: 'terraform'
          github_token: ${{ github.token }}

      - name: tfsec SARIF Report
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif
          tfsec_args: --minimum-severity HIGH

      - name: Upload tfsec SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: tfsec.sarif

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup aqua
        uses: aquaproj/aqua-installer@v3.0.1
        with:
          aqua_version: v2.30.0

      - name: Install tools via aqua
        run: aqua install --all

      - name: Terraform Module Dependency Check
        run: |
          echo "## Terraform Module Dependencies" >> $GITHUB_STEP_SUMMARY
          echo "Scanning for module versions and potential updates..." >> $GITHUB_STEP_SUMMARY
          
          find terraform/ -name "*.tf" -exec grep -l "source.*terraform-aws-modules" {} \; | while read file; do
            echo "### $file" >> $GITHUB_STEP_SUMMARY
            grep -n "source.*terraform-aws-modules\|version.*=" "$file" >> $GITHUB_STEP_SUMMARY || true
            echo "" >> $GITHUB_STEP_SUMMARY
          done

      - name: Terragrunt Configuration Check
        run: |
          echo "## Terragrunt Configuration Analysis" >> $GITHUB_STEP_SUMMARY
          echo "Checking Terragrunt configuration consistency..." >> $GITHUB_STEP_SUMMARY
          
          # Check for version consistency
          if [ -f "terragrunt/terragrunt.hcl" ]; then
            echo "### Root Configuration" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`hcl" >> $GITHUB_STEP_SUMMARY
            grep -A 10 "module_versions" terragrunt/terragrunt.hcl >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
