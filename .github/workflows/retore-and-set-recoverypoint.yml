name: Restore world action

on:
  workflow_dispatch:
    inputs:
      recovery_datetime:
        description: 'Date in %Y%m%d%H%M%S format'
        required: true
        default: '20231118225051'
  repository_dispatch:
      types:
        - restore
        

env:
  SLACK_USERNAME: RestoreActionBot
  SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
  SLACK_WEBHOOK: "https://hooks.slack.com/services/${{ secrets.WEBHOOK_PATH }}"
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  TERRAGRUNT_VERSION: 0.67.16
  TERRAFORM_VERSION: 1.9.8
permissions:
  id-token: write
  contents: read

jobs:
  terragrunt-restore:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
        role-session-name: github-actions-test-session
        aws-region: ap-northeast-1
        
    - name: Setup aqua
      uses: aquaproj/aqua-installer@v4.0.2
      with:
        aqua_version: v2.30.0


    - name: Setup Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Create Mapping Yaml
      working-directory: terragrunt/environments/scheduling
      run: |
        cat << EOF > secrets.yaml
        OPS: ${{ secrets.WHITELIST_PLAYERS }}
        WHITELIST: ${{ secrets.WHITELIST_PLAYERS }}
        WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        S3_PREFIX_NAME: ${{ secrets.S3_PREFIX_NAME }}
        FILTERING_STRINGS: ${{ secrets.FILTERING_STRINGS }}
        EOF
        
    - name: Set Terraform variables(workflow_dispatch)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "TF_VAR_recovery_time=${{ github.event.inputs.recovery_datetime }}" >> "$GITHUB_ENV"
    - name: Set Terraform variables(repository_dispatch)
      if: github.event_name == 'repository_dispatch'
      run: |
        echo "TF_VAR_recovery_time=${{ github.event.client_payload.recovery_datetime }}" >> "$GITHUB_ENV"
        
    - name: Initialize Terragrunt
      working-directory: terragrunt/environments/scheduling
      run: terragrunt init --terragrunt-non-interactive

    - name: Terragrunt Plan
      id: plan
      working-directory: terragrunt/environments/scheduling
      shell: /usr/bin/bash {0} # workaround ref:https://qiita.com/mkiken/items/3d2999217832704fcf01
      run: |
        terragrunt plan --terragrunt-non-interactive -detailed-exitcode \
          -var="recovery_time=${{ env.TF_VAR_recovery_time }}" \
          -var="set_recovery_point=true" \
          -var="set_seed_value=false"
        TF_PLAN_EXIT_CODE=$?
        echo "TF_PLAN_EXIT_CODE=${TF_PLAN_EXIT_CODE}" >> "$GITHUB_ENV"

    - name: Apply Terragrunt
      if: ${{ env.TF_PLAN_EXIT_CODE == 2 }}
      working-directory: terragrunt/environments/scheduling
      run: |
        terragrunt apply --terragrunt-non-interactive \
          -var="recovery_time=${{ env.TF_VAR_recovery_time }}" \
          -var="set_recovery_point=true" \
          -var="set_seed_value=false" \
          -auto-approve

    - name: Update ECS Service
      working-directory: terragrunt/environments/scheduling
      run: |
        # Replace with your AWS CLI command to update ECS service
        CLUSTER="$(aws ecs list-clusters | jq -r '.clusterArns[0]' )"
        SVC="$(aws ecs list-services --cluster "${CLUSTER}" | jq -r '.serviceArns[0]' | sed -E 's/.+cluster\///g')"
        TASK_REVISION="$(aws ecs describe-task-definition \
          --task-definition minecraft-test \
          --query 'taskDefinition.revision' \
          --output text)"

        aws ecs update-service --cluster "${CLUSTER}" \
          --service "${SVC}" \
          --task-definition minecraft-test:"${TASK_REVISION}" \
          --force-new-deployment
          
    - name: Slack Notification for Success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Successful'
        SLACK_COLOR: good
        SLACK_MESSAGE: 'Backup restored successfully for date: ${{ github.event.inputs.recovery_datetime }} :rocket:' 

    - name: Slack Notification for Failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Failed'
        SLACK_COLOR: danger
        SLACK_MESSAGE: "Workflow failed. Check details here: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
  
