name: Restore world action

on:
  workflow_dispatch:
    inputs:
      recovery_datetime:
        description: 'Date in %Y%m%d%H%M%S format'
        required: true
        default: '20230101010101'

env:
  SLACK_USERNAME: RestoreActionBot
  SLACK_ICON: https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png
  SLACK_WEBHOOK: "https://hooks.slack.com/services/${{ secrets.WEBHOOK_PATH }}"
  TF_VAR_WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
permissions:
  id-token: write
  contents: read

jobs:
  terraform-plan-apply:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/minecraft-test-github-actions
        role-session-name: github-actions-test-session
        aws-region: ap-northeast-1
      
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.3.9
    - name: Create Mapping Yaml
      working-directory: terraform/scheduling
      run: |
        cat << EOF > secrets.yaml
        OPS: ${{ secrets.WHITELIST_PLAYERS }}
        WHITELIST: ${{ secrets.WHITELIST_PLAYERS }}
        WEBHOOK_PATH: ${{ secrets.WEBHOOK_PATH }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        S3_PREFIX_NAME: ${{ secrets.S3_PREFIX_NAME }}
        FILTERING_STRINGS: ${{ secrets.FILTERING_STRINGS }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}  
        EOF
    - name: Set Terraform variables
      run: |
        echo "TF_VAR_recovery_time=${{ github.event.inputs.recovery_datetime }}" >> $GITHUB_ENV
        echo "TF_VAR_set_recovery_time=true" >> $GITHUB_ENV

    - name: Initialize Terraform
      working-directory: terraform/scheduling
      run: terraform init -lock=false

    - name: Terraform Plan
      id: plan
      working-directory: terraform/scheduling
      run: |
        terraform plan -no-color -lock=false \
            -var recovery_time=${{ github.event.inputs.recovery_datetime }} \
            -var set_recovery_point=true -detailed-exitcode
        echo "TF_PLAN=${?}" >> $GITHUB_ENV

    - name: Apply Terraform
      if: ${{ env.TF_PLAN }} == '2'
      working-directory: terraform/scheduling
      run: |
        terraform apply -lock=false \
          -var recovery_time=${{ github.event.inputs.recovery_datetime }} \
          -var set_recovery_time=true \
          -auto-approve

    - name: Update ECS Service
      if: ${{ env.TF_PLAN }} == '0'
      working-directory: terraform/scheduling
      run: |
        # Replace with your AWS CLI command to update ECS service
        CLUSTER=$(aws ecs list-clusters | jq -r '.clusterArns[0]' )
        SVC=$(aws ecs list-services --cluster ${CLUSTER} | jq -r '.serviceArns[0]' | sed -E 's/.+cluster\///g')

        aws ecs update-service --force-new-deployment --cluster ${CLUSTER} --service ${SVC}
    - name: Slack Notification for Success
      if: ${{ success() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Successful'
        SLACK_COLOR: good
        SLACK_MESSAGE: 'Backup restored successfully for date: ${{ github.event.inputs.recovery_datetime }} :rocket:' 

    - name: Slack Notification for Failure
      if: ${{ failure() }}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_TITLE: 'Operation Failed'
        SLACK_COLOR: danger
        SLACK_MESSAGE: "Workflow failed. Check details here: https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
  
